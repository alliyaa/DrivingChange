

const Page = document.createElement('div');
Page.classList.add('mainpage');


    createFirstPage();
    function createFirstPage() {
   
        Page.classList.add('homepage');
        Page.classList.remove('mainpage');
        Page.classList.remove('referencepage');
   
      
        const Header = document.createElement('div');
        Header.innerHTML = "Find Out Your <br>  Carbon Footprint!";
        Header.classList.add('HeaderM');

        const homeButton = document.createElement('button');
        homeButton.textContent = "Learn More";

        homeButton.addEventListener('click', () => {
         Page.innerHTML = '';
         Page.textContent = '';
            createSecondPage();
        });

        Page.appendChild(Header);
        Page.appendChild(homeButton);
        document.body.appendChild(Page);
    }

  
    function createLeaf() {
        const leaf = document.createElement('div');
        leaf.classList.add('leaf');
        leaf.style.left = `${Math.random() * window.innerWidth}px`;
        document.getElementById('leaves-container').appendChild(leaf);
        
     
        const duration = Math.random() * 3 + 3; // Between 3 to 8 seconds
        leaf.style.animation = `fall ${duration}s linear forwards`;
        
        
        setTimeout(() => {
          leaf.remove();
        }, duration * 1000);
      }
      
      function createLeaves(numLeaves) {
        for (let i = 0; i < numLeaves; i++) {
          setTimeout(createLeaf, Math.random() * 2000); 
        }
      }
      
 
      const screenWidth = window.innerWidth;
      const numLeaves = screenWidth > 1200 ? 70 : screenWidth > 600 ? 20 : 10;
      
     
      createLeaves(numLeaves);
    

    function createSecondPage() {
       
        Page.classList.add('secondPageDiv');
        Page.classList.add('mainpage');
        Page.classList.remove('referencepage');
        
        Page.innerHTML = "<h5>Choose Your Mode of Transportation</h5>";
    
        const carImg = document.createElement('img');
        carImg.classList.add('carImg');
        carImg.src ='Car.png';
        Page.appendChild(carImg);
    
        const carButton = document.createElement('button');
        carButton.addEventListener('click', () => {
            document.body.innerHTML = '';
            TripTime('car');
        });
        carButton.textContent = 'Car';
        Page.appendChild(carButton);
        carButton.classList.add('car');
    
        const busImg = document.createElement('img');
        busImg.classList.add('busImg');
        busImg.src = 'bus.png';
        Page.appendChild(busImg);
    
        const busButton = document.createElement('button');
        busButton.addEventListener('click', () => {
            document.body.innerHTML = '';
            TripTime('bus');
        });
        busButton.textContent = 'Bus';
        Page.appendChild(busButton);
        busButton.classList.add('bus');
    
        const trainImg = document.createElement('img');
        trainImg.classList.add('trainImg');
        trainImg.src = 'Train.png';
        Page.appendChild(trainImg);
    
        const trainButton = document.createElement('button');
        trainButton.addEventListener('click', () => {
            document.body.innerHTML = '';
            TripTime('train');
        });
        trainButton.textContent = 'Train';
        Page.appendChild(trainButton);
        trainButton.classList.add('train');
    
  
        document.body.appendChild(Page); 
    }
    



const homeLink = document.getElementById("homeLink");

homeLink.addEventListener("click", function(event) {
     event.preventDefault();
     Page.classList.remove('secondPageDiv');
     Page.classList.remove('awarenessPage');
     Page.classList.remove('referencepage');
     Page.innerHTML = '';
     Page.textContent = '';
     createFirstPage();

   
  
   
});



const awarenessLink = document.getElementById("awarenessLink");

awarenessLink.addEventListener("click", function(event) {
    event.preventDefault();
    
    Page.classList.remove('referencepage');
    Page.classList.remove('secondPageDiv');
    Page.textContent = "";
    Page.innerHTML = "";
    Page.classList.add('mainpage');
  

    Page.innerHTML+=" <h2> General Awareness on Carbon Emission <h2>";
 


    Page.classList.add('awarenessPage');
  
    Page.innerHTML += " <h3> Carbon dioxide emissions from transportation are a significant contributor to climate change. In Saudi Arabia alone, transportation emissions reached a staggering 277.74 million tonnes of COâ‚‚ in 2022. These emissions not only contribute to global warming but also lead to poor air quality and environmental degradation.<br><br>Our Purpose<br><br>Our project aims to shed light on the daily carbon emissions generated by individual transportation choices. By illustrating the immense difference in emissions between various modes of transport, we hope to inspire people to opt for more sustainable alternatives available within the Kingdom.<br><br>Join Us in Making a Difference<br><br>Every journey counts. By making informed decisions about how we travel, we can collectively reduce our carbon footprint and contribute to Saudi Arabia's ambitious goal of achieving zero net emissions by 2060. While many sustainability initiatives focus on large-scale solutions, we believe in the power of individual actions. By providing users with a platform to calculate their carbon emissions per trip, rather than per kilometer, we aim to offer a more personalized and relatable perspective. This approach aligns with Saudi Arabia's Vision 2030, which emphasizes the importance of reducing carbon emissions at both the individual and national levels.<br><br>How You Can Get Involved<br><br>Explore our website to learn more about the environmental impact of different modes of transportation and discover practical tips for reducing your carbon footprint. Share our message with your friends, family, and colleagues to spread awareness and inspire collective action towards a more sustainable future.<br><br>Together, let's drive change and harness the power of public transportation for a greener, healthier Saudi Arabia.<br><br>Join the movement. Drive sustainably. </h3>";
  

    document.body.appendChild(Page);
});




function TripTime(viechle)
{
   const tripTime = document.createElement('div');
   tripTime.classList.add('thirdPage');

   const tripTimeQ = document.createElement('div');
   tripTimeQ.classList.add('thirdPageH');
   tripTimeQ.textContent= "Enter your Trip Distance in Kilometres ";
   tripTime.appendChild(tripTimeQ);

   const editTime = document.createElement('div');
   editTime.classList.add('editableBox');;
   editTime.contentEditable = true;
   editTime.textContent=" ";
   tripTime.appendChild(editTime);

   const calculateButton = document.createElement('button');
   calculateButton.textContent = "Calculate";
   tripTime.appendChild(calculateButton);

    calculateButton.addEventListener('click', function() {

    const editedContent = editTime.textContent;
    const numericContent = editedContent.replace(/\D/g, ''); 
    editTime.textContent = numericContent;



    const editedTime = editTime.textContent;

    if(viechle==='car')
    {

      carCarbonEmission(editedTime, viechle);

    }

    else if (viechle==='bus')
    {
       
          busCarbonEmission(editedTime, viechle);
    }

    else
    {
        trainCarbonEmission(editedTime, viechle);
    }
    

});


document.body.appendChild(tripTime);



}


 class CarbonEmission
 {
    constructor(time, viechle)
    {
        this.time=time;
        this.viechle=viechle;
    }
    
    carCarbon() {
            const carCarbonE = this.time * 597; 
            return carCarbonE;
        }
    

    busCarbon() 
        {
            const carCarbonE = this.time * 482; 
            return carCarbonE;
        }
    

    trainCarbon() 
        {
            const carCarbonE = this.time * 10; 
            return carCarbonE;
        }
    
}


    


function carCarbonEmission(editedTime, viechle)
{
    document.body.textContent='';
    const emission = new CarbonEmission(editedTime, viechle);
    const carCarbonC = emission.carCarbon(); 


    const carbonEDivH = document.createElement('div');
    const carbonEDiv = document.createElement('div');
    
    const fourthPage = document.createElement('div');
    carbonEDivH.classList.add('HeaderV')
   

    carbonEDivH.textContent+= "With the car ";
    carbonEDiv.textContent+= carCarbonC; 
    carbonEDiv.textContent+= " grams of Co2 are emitted";
    
    fourthPage.appendChild(carbonEDivH);
    fourthPage.appendChild(carbonEDiv);
  

    const Tree = document.createElement('div');
    Tree.classList.add('TreeQ');
    Tree.textContent+= "How many trees need to be planted per year to offset your  net carbon emissions?";
    fourthPage.appendChild(Tree);

    // const TreeButton = document.createElement('button');
    // TreeButton.classList.add('Treebtn');
    // TreeButton.textContent += "See Trees";
    // fourthPage.appendChild(TreeButton);

    TreesPerEmission(carCarbonC,viechle,fourthPage);
     
    
     const OthersButton = document.createElement('button');
     OthersButton.classList.add('Treebtn');
     OthersButton.textContent += "Compare Emissions";
     fourthPage.appendChild(OthersButton);
   
   OthersButton.addEventListener('click', () =>
   {
    const carbonODiv = document.createElement('div');
    
    const carbonHDiv = document.createElement('div');
    carbonHDiv.textContent+="For the same trip";

    carbonODiv.textContent+= "A bus emits ";
    const carCarbonB = emission.busCarbon(); 
    carbonODiv.textContent+= carCarbonB; 
    carbonODiv.textContent+= " grams of Co2"; 
    

    const carbonTDiv = document.createElement('div');
    carbonTDiv.textContent ="A train emits ";
    const carCarbonT = emission.trainCarbon(); 
    carbonTDiv.textContent+= carCarbonT;
    carbonTDiv.textContent+= " grams of Co2";

    fourthPage.classList.add('fourthPage');
    fourthPage.appendChild(carbonHDiv);
    fourthPage.appendChild(carbonODiv);
    fourthPage.appendChild(carbonTDiv);


    carbonEDiv.classList.add('carbon');
    carbonODiv.classList.add('carbon');
    carbonHDiv.classList.add('HeaderV');
    carbonTDiv.classList.add('carbon');

   });
    
    document.body.appendChild(fourthPage);
  
    // TreeButton.addEventListener('click', () => {
       
    // TreesPerEmission(carCarbonC,viechle,fourthPage);

    // });
   

}

function busCarbonEmission(editedTime, viechle)
{
    document.body.textContent='';
    const emission = new CarbonEmission(editedTime, viechle);
    const busCarbonE = emission.busCarbon(); 
    
    
    const fourthPage = document.createElement('div');

    const carbonEDiv = document.createElement('div');
    
    const carbonEDivH = document.createElement('div');
    carbonEDivH.classList.add('HeaderV')
    fourthPage.appendChild(carbonEDivH)

    carbonEDivH.textContent+= "With the Bus";
    carbonEDiv.textContent+= busCarbonE; 
    carbonEDiv.textContent+= " grams of Co2 are emitted";
    

    fourthPage.appendChild(carbonEDiv);

    TreesPerEmission(busCarbonE,viechle,fourthPage);

    const OthersButton = document.createElement('button');
    OthersButton.classList.add('Treebtn');
    OthersButton.textContent += "Compare Emissions";
    fourthPage.appendChild(OthersButton);
    
    OthersButton.addEventListener('click', () =>
    {
    const carbonODiv = document.createElement('div');

    const carbonHDiv = document.createElement('div');
    carbonHDiv.textContent+="For the same trip:";

    carbonODiv.textContent+= "A car emits ";
    const carCarbonC = emission.carCarbon(); 
    carbonODiv.textContent+= carCarbonC; 
    carbonODiv.textContent+= " grams of Co2"; 
   
    
    const carbonTDiv = document.createElement('div');
    carbonTDiv.textContent ="A train emits ";
    const carCarbonT = emission.trainCarbon(); 
    carbonTDiv.textContent+= carCarbonT;
    carbonTDiv.textContent+= " grams of Co2";

    fourthPage.classList.add('fourthPage');
    fourthPage.appendChild(carbonHDiv);
    fourthPage.appendChild(carbonODiv);
    fourthPage.appendChild(carbonTDiv);


    carbonEDiv.classList.add('carbon');
    carbonODiv.classList.add('carbon');
    carbonHDiv.classList.add('HeaderV');
    carbonTDiv.classList.add('carbon');

    });
      
    document.body.appendChild(fourthPage);



}

function trainCarbonEmission(editedTime, viechle)
{
    document.body.textContent='';
    const emission = new CarbonEmission(editedTime, viechle);
    const trainCarbonE = emission.trainCarbon();


    const carbonEDivH = document.createElement('div');
    const carbonEDiv = document.createElement('div');
    
    const fourthPage = document.createElement('div');
    carbonEDivH.classList.add('HeaderV')
    fourthPage.appendChild(carbonEDivH)

    carbonEDivH.textContent+= "With the train";
    carbonEDiv.textContent+= trainCarbonE; 
    carbonEDiv.textContent+= " grams of Co2 are emitted";
    
  
    fourthPage.appendChild(carbonEDiv);

    TreesPerEmission(busCarbonE,viechle,fourthPage);
    
    const OthersButton = document.createElement('button');
    OthersButton.classList.add('Treebtn');
    OthersButton.textContent += "Compare Emissions";
    fourthPage.appendChild(OthersButton);
    
    OthersButton.addEventListener('click', () =>
    {
   
    const carbonODiv = document.createElement('div');

    
    const carbonHDiv = document.createElement('div');
    carbonHDiv.textContent+="For the same trip";

    carbonODiv.textContent+= "A car emits ";
    const carCarbonC = emission.carCarbon(); 
    carbonODiv.textContent+= carCarbonC; 
    carbonODiv.textContent+= " grams of Co2"; 

    const carbonBDiv = document.createElement('div');
    carbonBDiv.textContent+= "A bus emits ";
    const carCarbonB = emission.busCarbon(); 
    carbonBDiv.textContent+= carCarbonB; 
    carbonBDiv.textContent+= " grams of Co2"; 
   
    fourthPage.classList.add('fourthPage');
    fourthPage.appendChild(carbonHDiv);
    fourthPage.appendChild(carbonODiv);
    fourthPage.appendChild(carbonBDiv);

    carbonEDiv.classList.add('carbon');
    carbonODiv.classList.add('carbon');
    carbonHDiv.classList.add('HeaderV');
    carbonBDiv.classList.add('carbon');

    });
    
    document.body.appendChild(fourthPage);

   

}

function TreesPerEmission(emission, vehicle, fourthPage) {
    fourthPage.textContent = '';
    const fifthPage = document.createElement('div');
    fifthPage.classList.add('fifthPage');

    const TreeDiv = document.createElement('div');
    TreeDiv.textContent += "With the " + vehicle + " as your mode of transportation, the carbon emissions are equivalent to ";
    const Trees = (((emission / 1000) *252 / 20)).toFixed(1);
    const numTrees = Math.ceil(Trees);

    TreeDiv.textContent += numTrees + " trees per year";
    TreeDiv.classList.add('HeaderV');

    const Treepic = document.createElement('div');
    Treepic.classList.add('TreeBackg');

   
    let treeCounter = 0;
    const interval = setInterval(function () {
        if (treeCounter < numTrees) {
            const treeImg = document.createElement('img');
            treeImg.src = 'Trees.png';
            treeImg.alt = 'Tree';
            treeImg.classList.add('tree');
            Treepic.appendChild(treeImg);
            treeCounter++;
        } else {
            clearInterval(interval);
        }
    }, 300); 

    fifthPage.appendChild(TreeDiv);
    fifthPage.appendChild(Treepic);

    document.body.appendChild(fifthPage);
}

const refLink = document.getElementById("refLink");

refLink.addEventListener("click", function(event) {
   
   
    event.preventDefault();

   



    Page.innerHTML="";
    Page.textContent="";
    Page.innerHTML += "<h2> Assumptions </h2>";
    Page.innerHTML+= "<h3> hi </h3>";
    Page.classList.add('referencepage');
  
});


window.addEventListener("DOMContentLoaded",() => {
	const t = new Tree("canvas");
});

class Tree {
	constructor(qs) {
		this.C = document.querySelector(qs);
		this.c = this.C?.getContext("2d");
		this.S = window.devicePixelRatio;
		this.W = 800;
		this.H = 800;
		this.branches = [];
		this.darkTheme = false;
		this.debug = false;
		this.decaying = false;
		this.floorY = 685;
		this.fruit = [];
		this.gravity = 0.098;
		this.loopDelay = 500;
		this.loopEnd = Utils.dateValue;
		this.maxGenerations = 10;

		if (this.C) this.init();
	}
	get allBranchesComplete() {
		const { branches, maxGenerations } = this;

		return branches.filter(b => {
			const isLastGen = b.generation === maxGenerations;
			return b.progress >= 1 && isLastGen;
		}).length > 0;
	}
	get allFruitComplete() {
		return !!this.fruit.length && this.fruit.every(f => f.progress === 1);
	}
	get allFruitFalling() {
		return !!this.fruit.length && this.fruit.every(f => f.timeUntilFall <= 0);
	}
	get debugInfo() {
		return [
			{ item: 'Pixel Ratio', value: this.S },
			{ item: 'Branches', value: this.branches.length },
			{ item: 'Branches Complete', value: this.allBranchesComplete },
			{ item: 'Decaying', value: this.decaying },
			{ item: 'Fruit', value: this.fruit.length },
			{ item: 'Fruit Complete', value: this.allFruitComplete }
		];
	}
	get lastGeneration() {
		const genIntegers = this.branches.map(b => b.generation);
		return [...new Set(genIntegers)].pop();
	}
	get trunk() {
		return {
			angle: 0,
			angleInc: 20,
			decaySpeed: 0.0625,
			diameter: 10,
			distance: 120,
			distanceFade: 0.2,
			generation: 1,
			growthSpeed: 0.04,
			hadBranches: false,
			progress: 0,
			x1: 400,
			y1: 680,
			x2: 400,
			y2: 560
		};
	}
	detectTheme(mq) {
		this.darkTheme = mq.matches;
	}
	draw() {
		const { c, W, H, debug, branches, fruit } = this;

		c.clearRect(0,0,W,H);

		const lightness = this.darkTheme ? 90 : 10;
		const foreground = `hsl(223,10%,${lightness}%)`;
		c.fillStyle = foreground;
		c.strokeStyle = foreground;

		// debug info
		if (debug === true) {
			const textX = 24;

			this.debugInfo.forEach((d,i) => {
				c.fillText(`${d.item}: ${d.value}`,textX,24 * (i + 1));
			});
		}

		// branches
		branches.forEach(b => {
			c.lineWidth = b.diameter;
			c.beginPath();
			c.moveTo(b.x1,b.y1);
			c.lineTo(
				b.x1 + (b.x2 - b.x1) * b.progress,
				b.y1 + (b.y2 - b.y1) * b.progress
			);
			c.stroke();
			c.closePath();
		});

		// fruit
		fruit.forEach(f => {
			c.globalAlpha = f.decayTime	< f.decayFrames ? f.decayTime / f.decayFrames : 1;
			c.beginPath();
			c.arc(f.x,f.y,f.r * f.progress,0,2 * Math.PI);
			c.fill();
			c.closePath();
			c.globalAlpha = 1;
		});
	}
	grow() {
		// start with the trunk
		if (!this.branches.length && Utils.dateValue - this.loopEnd > this.loopDelay) {
			this.branches.push(this.trunk);
		}

		if (!this.allBranchesComplete) {
			this.branches.forEach(b => {
				if (b.progress < 1) {
					// branch growth
					b.progress += b.growthSpeed;

					if (b.progress > 1) {
						b.progress = 1;

						// grow fruit if the generation is the last
						if (b.generation === this.maxGenerations) {
							this.fruit.push({
								decayFrames: 18,
								decayTime: 150,
								progress: 0,
								speed: 0.04,
								timeUntilFall: Utils.randomInt(0,300),
								x: b.x2,
								y: b.y2,
								r: Utils.randomInt(4,6),
								restitution: 0.2 * (1 - b.y2 / this.floorY),
								yVelocity: 0
							});
						}
					}

				} else if (!b.hadBranches && b.generation < this.maxGenerations) {
					b.hadBranches = true;
					// create two new branches
					const lean = 5;
					const angleLeft = b.angle - (b.angleInc + Utils.randomInt(-lean,lean));
					const angleRight = b.angle + (b.angleInc + Utils.randomInt(-lean,lean));
					const distance = b.distance * (1 - b.distanceFade);
					const generation = b.generation + 1;

					const leftBranch = {
						angle: angleLeft,
						angleInc: b.angleInc,
						decaySpeed: b.decaySpeed,
						diameter: Math.floor(b.diameter * 0.9),
						distance,
						distanceFade: b.distanceFade,
						generation,
						growthSpeed: b.growthSpeed,
						hadBranches: false,
						progress: 0,
						x1: b.x2,
						y1: b.y2,
						x2: b.x2 + Utils.endPointX(angleLeft,distance),
						y2: b.y2 - Utils.endPointY(angleLeft,distance)
					};

					const rightBranch = {...leftBranch};
					rightBranch.angle = angleRight;
					rightBranch.x2 = b.x2 + Utils.endPointX(angleRight,distance);
					rightBranch.y2 = b.y2 - Utils.endPointY(angleRight,distance);

					this.branches.push(leftBranch,rightBranch);
				}
			});
		}
		if (!this.allFruitComplete) {
			this.fruit.forEach(f => {
				if (f.progress < 1) {
					f.progress += f.speed;

					if (f.progress > 1) f.progress = 1;
				}
			});
		}

		if (this.allBranchesComplete && this.allFruitComplete) this.decaying = true;
	}
	decay() {
		if (this.fruit.length) {
			// fruit fall
			this.fruit = this.fruit.filter(f => f.decayTime > 0);

			this.fruit.forEach(f => {
				if (f.timeUntilFall <= 0) {
					f.y += f.yVelocity;
					f.yVelocity += this.gravity;

					const bottom = this.floorY - f.r;

					if (f.y >= bottom) {
						f.y = bottom;
						f.yVelocity *= -f.restitution;
					}

					--f.decayTime;

				} else if (!f.decaying) {
					--f.timeUntilFall;
				}
			});
		}
		if (this.allFruitFalling || !this.fruit.length) {
			// branch decay
			this.branches = this.branches.filter(b => b.progress > 0);

			this.branches.forEach(b => {
				if (b.generation === this.lastGeneration) b.progress -= b.decaySpeed;
			});
		}
		if (!this.branches.length && !this.fruit.length) {
			// back to the trunk
			this.decaying = false;
			this.loopEnd = Utils.dateValue;
		}
	}
	init() {
		this.setupCanvas();
		this.setupThemeDetection();
		this.run();
	}
	run() {
		this.draw();

		if (this.decaying) this.decay();
		else this.grow();

		requestAnimationFrame(this.run.bind(this));
	}
	setupCanvas() {
		const { C, c, W, H, S } = this;

		// properly scale the canvas based on the pixel ratio
		C.width = W * S;
		C.height = H * S;
		C.style.width = "auto";
		C.style.height = "100%";
		c.scale(S,S);

		// set unchanging styles
		c.font = "16px sans-serif";
		c.lineCap = "round";
		c.lineJoin = "round";
	}
	setupThemeDetection() {
		if (window.matchMedia) {
			const mq = window.matchMedia("(prefers-color-scheme: dark)");
			this.detectTheme(mq);
			mq.addListener(this.detectTheme.bind(this));
		}
	}
}

class Utils {
	static get dateValue() {
		return +new Date();
	}
	static endPointX(angleInDeg,distance) {
		return Math.sin(angleInDeg * Math.PI / 180) * distance;
	}
	static endPointY(angleInDeg,distance) {
		return Math.cos(angleInDeg * Math.PI / 180) * distance;
	}
	static randomInt(min,max) {
		return min + Math.round(Math.random() * (max - min));
	}
}

const tree1 = new Tree("#tree1");
const tree2 = new Tree("#tree2");


